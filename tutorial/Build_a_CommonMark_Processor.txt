---
title: Build a CommonMark Processor
abstract: >
  In this post I go over the process of building a TypeScript module called `commonMarkDoc.ts` along with a simple command line CommonMark processor called `cmarkprocess`.
  
  CommonMark pre-processor features are

    - support `@include-code-block` for including code samples as code blocks
    - support `@include-text-block` for include plain text into a CommonMark document
    - transform Hashtags into front matter
    - transform @Tags into front matter

keywords:
  - CommonMark
  - Markdown
  - Front Matter
dateCreated: 2025-07-26
dateModified: 2025-07-28
datePublished: 2025-07-26
author: R. S. Doiel
copyrightYear: 2025
copyrightHolder: R. S. Doiel
license: https://creativecommons.org/licenses/by-sa/4.0/
series: Deno and TypeScript
seriesNo: 10
---

# Building a CommonMark Processor in Deno+TypeScript

By R. S. Doiel, 2025-07-26

CommonMark and Markdown are easier to proof read and edit than HTML. CommonMark is a super set of John Grubber's original Markdown. It incorporates common practices and extensions to the original Markdown. I've found over the years the "Markdown" I type is really "CommonMark". I use [Pandoc](https://pandoc.org) for processing my CommonMark documents into HTML. There are a few transforms I'd like to make before I send the text off to Pandoc. That is what I'll be covering.

My CommonMark Processor will be responsible for several things. The features I miss are simple. Here's the short list.

- support `@include-code-block` for including code samples as code blocks
- support `@include-text-block` for include plain text into a CommonMark document
- transform Hashtags into front matter
- transform web Mentions into front matter

My homepage is built from a sequence of plain text files.
I also commonly need to include source code in my blog posts.  That has lead me to think about an include mechanisms. A source file should be included in a CommonMark code block while plain text can be included as is. 

The include blocks, text and code, can also be detected through regular expression. The difference for those is they require reading files from disk. That needs to be handled.

Here's the syntax I'd use for code block and included texts.

  > `@include-code-block` `FILEPATH [LANGUAGE]`

  > `@include-text-block` `FILEPATH`

Finally I'd to add support for [Hashtags](https://en.wikipedia.org/wiki/Hashtag) and web [Mentions](https://en.wikipedia.org/wiki/Mention_(blogging)). I want to explore integrating both with facets in search results, for that I'll need to track them in the front matter. Overtime I'll explore new features. The `commonMarkDoc.ts` module needs to be simple to extend.

How do I extract Hashtags and Mentions? Both are function similar though are used for different purposes. A regular expression should be suitable to pick them out. The difference between extracting a Hashtag or a Mention is the prefix, "#" or "@". A function that code use the supplied text and prefix could return a list of tagged results.

I want to easily extend the processor. I can create modules based on the transforms I need. Each module will include a function that implements the transform. The `process` method will be responsible for sequencing the transforms and updating the CommonMark object with the results.

What do I need in my CommonMark document object? I need to take the markup, parse it and have the object holding the CommonMark document split into front matter and content. Similarly I will need to reassemble the parts into back into a CommonMark text.  Those functions will be called `parse` and `stringify`. These names are idiomatic in JavaScript and TypeScript. The object type will be called `CommonMarkDoc`.

Here is the basic outline of the `CommonMarkDoc` object without the `process` method.

@include-code-block commonMarkDoc_v1.ts TypeScript

This object makes it easy to work the front matter and the main content parts of a CommonMark document. The `parse` and `stringify` methods can bookend the `process` method implementing the transform sequence. This provides the functionality needed to implement a CommonMark Processor.

The `process` method will evolve overtime. I need to minimize its complexity. The `process` method is only responsible for sequencing the transforms defined in their own modules.

## Inclusion mechanisms

Before writing the `process` method I will work through the transform modules.

I need two inclusion mechanisms. One will support plain text file inclusion. The other will wrap the included file in the CommonMark markup for code blocks. Here's the syntax I want to use in my CommonMark document.

> `@include-text-block` `FILENAME`

> `@include-code-block` `FILENAME LANGUAGE`

Each of these will be implemented in their own module. Let's look at the one for `@include-text-block`. Here's what the include text module looks like.

@include-code-block ../src/includeTextBlock.ts TypeScript

The public function handles finding the file referenced, reading it into a string before including it the transformed content block.  Let's look at the one for `@include-code-block`.

@include-code-block ../src/includeCodeBlock.ts TypeScript

These modules are very similar. I've implemented them as separate modules because I want the option of evolving them independently. I don't want to entangled the two functions unnecessarily. Keeping both simple in separate modules aligns with that.

## Hashtags and Mentions

The other transforms needed in the `process` method are extracting the Hashtags and Mentions which will be used to update the front matter. Both Hashtags and Mentions are similar. They have a prefix, "#" or "@" followed by a sequence of alphanumeric characters, period and underscores. Trailing periods are stripped. They should be kept separate in the front matter. Each plays different content roles. 

Collecting  tags in the text is easy using a regular expression. I have to make a choice about the resulting list. One approach would just be list a tag each time it is encountered. This will result in repeated tags. That can be problematic. Instead I would like the list of tags returned to be a unique list. The extraction function will need a parameter for the source text and the prefix. It should return a list of unique tags. I'm going to call this function, `extractTags`.

As I collect tags I will need an ability to merge the unique tag. That suggestions a merge function. That function will take one or more lists of tags and return a single list of unique tags.  I'm going to call these function `mergeTags`. Both relate to tags and exist because of extraction.  I'll put them in a module called `extractTags.ts`.  Here is my implementation.

@include-code-block ../src/extractTags.ts TypeScript

## The `process` method

I have the set of transforms I want. I will need to sequence them in the `process` method.  Here is a look at the internals of the `process` method.

@include-code-block process_method.txt TypeScript

To use the the transform functions in the `process` method I need to import them.

@include-code-block import_block.txt TypeScript

## The complete CommonMark processor module

Here is the complete `commonMarkDoc.ts` module.

@include-code-block commonMarkDoc_v2.ts TypeScript

## The CommonMark processor application

To use this module I need to wrap it so I can execute it from the command line. My processor is going to be called `cmarkprocess` so I'll name the module that becomes the command line program is `cmarkprocess.ts`. This module will include a "main" function, that function will handle command line options and parameters as well as read data from either standard input or a file.  It'll use the `CommonMarkDoc` `process` method and write the results to standard out.

@include-code-block ../mod.ts TypeScript

Now that we have our wrapping modules, how do I get a nice executable using Deno?

~~~shell
deno compile --allow-read -o bin/cmarkprocess cmarkprocess.ts
~~~

The result is an executable, `bin/cmarkprocess`. This executable can read from standard input or from a file path. It will write to standard output.

